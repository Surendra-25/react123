{"version":3,"sources":["data/mobile.jpg","components/Resume.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Resume","props","info","data","Mobiles","location","data1","key","console","log","className","details","name","model","price","Home","product","map","values","index","to","pathname","src","icon","alt","style","width","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,oC,gMCG5B,SAASC,EAAOC,GAC3B,IAAIC,EAAKC,EAAKC,QAAQH,EAAMI,SAASC,MAAMC,KAI3C,OAHAC,QAAQC,IAAIP,GAIR,yBAAKQ,UAAU,8BACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wCAAcR,EAAKS,QAAQC,MAC3B,wBAAIF,UAAU,kBAAd,UAAwCR,EAAKS,QAAQE,OACrD,sCAAYX,EAAKS,QAAQG,UAIrC,yBAAKJ,UAAU,kB,WCSZK,EAtBN,WACL,IAAIC,EAAQb,EAAKC,QAEjB,OADAI,QAAQC,IAAIO,GAER,yBAAKN,UAAU,8BACVM,EAAQC,KAAK,SAACC,EAAOC,GAAR,OACV,6BAAST,UAAU,mCAAmCH,IAAKY,GACvD,yBAAKT,UAAU,QACX,kBAAC,IAAD,CAAMU,GAAI,CAAEC,SAAS,UAAWf,MAAM,CAACC,IAAIY,KACvC,6BAAST,UAAU,aACf,yBAAKY,IAAKC,IAAMC,IAAI,gBAAgBC,MAAO,CAACC,MAAM,SAClD,4BAAMR,EAAOP,QAAQC,e,OCAtCe,MAXf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,UAAUC,UAAW9B,OCCzB+B,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.c553d762.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mobile.efc8684e.jpg\";","import React from 'react'\r\nimport data from '../data/data.json';\r\n\r\nexport default function Resume(props) {\r\n    let info=data.Mobiles[props.location.data1.key];\r\n    console.log(info);\r\n\r\n\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-lg-3 m-2\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h1>product: {info.details.name}</h1>\r\n                        <h3 className=\"text-secondary\">Model: { info.details.model }</h3>\r\n                        <h3>price: {info.details.price}</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-lg-8 m-2\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport data from '../data/data.json';\r\nimport icon from '../data/mobile.jpg';\r\nimport Resume from './Resume'\r\nimport { Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nlet Home=()=>{\r\n    let product=data.Mobiles;\r\n    console.log(product);\r\n    return(\r\n        <div className=\"row justify-content-center\">\r\n            {product.map( (values,index)=>(\r\n                <section className=\"col-lg-4 col-md-4 col-sm-10 mt-2\" key={index}>\r\n                    <div className=\"card\">\r\n                        <Link to={{ pathname:\"/Resume\", data1:{key:index} }}>\r\n                            <article className=\"card-body\">\r\n                                <img src={icon} alt=\"profile image\" style={{width:\"50%\"}}></img>   \r\n                                <h1>{ values.details.name }</h1>\r\n                            </article>\r\n                        </Link>\r\n                    </div>\r\n                </section>\r\n            )\r\n        \r\n            )}\r\n        </div>\r\n    );\r\n}\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport { BrowserRouter,Route } from \"react-router-dom\";\nimport Resume from './components/Resume';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Route exact path='/' component={Home} />\n      <Route exact path='/resume' component={Resume} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}